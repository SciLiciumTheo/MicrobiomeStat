% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_taxa_test_single.R
\name{generate_taxa_test_single}
\alias{generate_taxa_test_single}
\title{Conduct Differential Abundance Testing Using ZicoSeq Method in MicrobiomeStat Package}
\usage{
generate_taxa_test_single(
  data.obj,
  time.var = NULL,
  t.level = NULL,
  group.var,
  adj.vars,
  prev.filter = 0,
  abund.filter = 0,
  feature.level,
  feature.dat.type = c("count", "proportion", "other"),
  ...
)
}
\arguments{
\item{data.obj}{A list containing the metadata and feature data.}

\item{time.var}{A string representing the time variable. Default is NULL.}

\item{t.level}{A string representing the time level. Default is NULL.}

\item{group.var}{A string indicating the variable used for grouping.}

\item{adj.vars}{A string indicating the adjustment variables.}

\item{prev.filter}{A numeric value indicating the prevalence filter threshold. Default is 0.}

\item{abund.filter}{A numeric value indicating the abundance filter threshold. Default is 0.}

\item{feature.level}{A character vector indicating the feature level(s).}

\item{feature.dat.type}{A character string representing the type of feature data. Choices are "count", "proportion", "other". Default is "count".}

\item{...}{Additional arguments to be passed to the ZicoSeq function.}
}
\value{
A list of tibble(s) containing information about significant taxa, including R.Squared, F.Statistic, Estimate, P.Value, Adjusted.P.Value, Mean.Proportion, Mean.Prevalence, SD.Abundance and SD.Prevalence.
}
\description{
This function applies a differential abundance analysis using ZicoSeq on a data set. The function filters taxa based on prevalence and abundance, then it aggregates and applies the ZicoSeq method. Finally, it creates a report of significant taxa with relevant statistics.
}
\examples{
\dontrun{
data(peerj32.obj)
da_report <- generate_taxa_test_single(
    data.obj = peerj32.obj,
    time.var = "time",
    t.level = "1",
    group.var = "group",
    adj.vars = "sex",
    feature.dat.type = "count",
    feature.level = "Genus",
    prev.filter = 0,
    abund.filter = 0,
    is.winsor = TRUE,
    outlier.pct = 0.001,
    winsor.end = 'top',
    is.post.sample = TRUE,
    post.sample.no = 25,
    list(function (x) x^0.5, function (x) x^0.25),
    stats.combine.func = max,
    perm.no = 99,
    strata = NULL,
    ref.pct = 0.5,
    stage.no = 6,
    excl.pct = 0.2,
    is.fwer = TRUE,
    verbose = TRUE
)
}
}
